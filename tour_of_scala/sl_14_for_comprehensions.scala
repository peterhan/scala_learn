//https://docs.scala-lang.org/tour/for-comprehensions.html
//
//Scala offers a lightweight notation for expressing sequence comprehensions. Comprehensions have the form for (enumerators) yield e, where enumerators refers to a semicolon-separated list of enumerators. An enumerator is either a generator which introduces new variables, or it is a filter. A comprehension evaluates the body e for each binding generated by the enumerators and returns a sequence of these values.

case class User(name:String,age:Int)
val userBase = List(
    User("Travis",28),
    User("Keylly",33),
    User("Jennifer",44),
    User("Dennis",23))
    
val twentySomethings = for(user<-userBase if(user.age>=20 && user.age < 30)) yield user.name
    
    
    
twentySomethings.foreach(name=>println(name))

def foo(n:Int,v:Int)=
    for(i<- 0 until n;j<- i until n if i+j==v)
    yield (i,j)
    
foo(10,10) foreach{
    case(i,j)=>
        println(s"($i,$j)")
}

def foo2(n: Int, v: Int) =
   for (i <- 0 until n;
        j <- i until n if i + j == v)
   println(s"($i, $j)")

foo2(10, 10)